pipeline {
    agent any

    environment{
         ARM_CLIENT_ID=credentials('arm_client_id')
         ARM_CLIENT_SECRET=credentials('arm_client_secret')
         ARM_SUBSCRIPTION_ID=credentials('arm_subscription_id')
         ARM_TENANT_ID=credentials('arm_tenant_id')
         GIT_CREDENTIAL=credentials('my_git_token_for_jenkin')
    }
    stages {
        stage('Verify  ARM Variables') {
            steps {
                script{
                    echo 'Validate ARM environment Variables' 
                    sh """
                        echo ###############
                        echo ${ARM_CLIENT_ID}
                        echo ${ARM_CLIENT_SECRET}
                        echo ${ARM_TENANT_ID}
                        echo "################"
                        az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} --tenant ${ARM_TENANT_ID}
                    """
                }

            }
        }
        stage('Install Terraform Binary') {
            steps {
                script {
                    echo 'Downloading and installing terrafomr binary'
                    sh """
                        if [ -d tf_binary ]; then rmdir tf_binary; else echo "Dir not there"; fi
                        mkdir tf_binary
                        cd tf_binary
                        curl https://releases.hashicorp.com/terraform/1.2.5/terraform_1.2.5_linux_amd64.zip --output terraform.zip
                        unzip terraform.zip
                        pwd
                        ls -lrth
                      """  
                }
                
            }
        }
        stage('verify terrafomr version') {
            steps {
                script{
                     echo 'checking terraform version'
                     sh """
                        cd tf_binary
                        ls -lrth
                        ./terraform -v
                     """

                }
               
            }
        }
        stage('Cloning terraform code') {
            steps {
                script{
                     echo 'checking out terraform code from git'
                     sh "git clone https://\$GIT_CREDENTIAL_PWD@github.com/Limasubhashree-1999/my_learnings.git"
                }
            }
        }
        stage('terraform init/plan') {
            steps {
                script{
                     echo '**************** terraform init **************'
                     sh """
                        ls -lrth
                        cd my_learnings/my_codes/my_4terraform_code/My_vm1
                        /var/jenkins_home/workspace/my_terraform_pipeline_1/tf_binary/terraform init
                        /var/jenkins_home/workspace/my_terraform_pipeline_1/tf_binary/terraform  plan 
                     """
                }
               
            }
        }
        stage('terraform apply') {
            steps {
                script{
                     echo '%%%%%%%%%%%%%%%% terraform apply %%%%%%%%%%%%%%%'
                     sh """
                        cd my_learnings/my_codes/my_4terraform_code/My_vm1
                        /var/jenkins_home/workspace/my_terraform_pipeline_1/tf_binary/terraform apply -auto-approve
                     """
                }
               
            }
        }
        stage('terraform destroy') {
            steps {
                script{
                     echo '%%%%%%%%%%%%%%%% terraform destroy %%%%%%%%%%%%%%%'
                     sh """
                        echo "Going to destroy the infrastructure, Please verify withing 5 minutes"
                        for num in \$(seq 300)
                        do 
                          echo "Sleeping \$num seconds"
                          sleep 1
                        done
                        cd my_learnings/my_codes/my_4terraform_code/My_vm1
                        /var/jenkins_home/workspace/my_terraform_pipeline_1/tf_binary/terraform apply -auto-approve
                     """
                }
               
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
